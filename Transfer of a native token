import asyncio
import logging
from web3 import Web3, HTTPProvider
from eth_account import Account
from dotenv import load_dotenv
import os
from typing import Optional

load_dotenv()

logging.basicConfig(level=logging.INFO)


class TransactionManager:
    def __init__(self, private_key: str, network: str, testnet: bool = False):
        self.private_key = private_key
        self.network = network
        self.testnet = testnet
        self.web3 = self.get_network_provider(network)
        self.account = self.validate_private_key(private_key)

    def get_network_provider(self, network: str) -> Web3:
        rpc_urls = {
            'eth': os.getenv('ETH_MAINNET_URL', 'https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'),
            'eth_test': os.getenv('SEPOLIA_TESTNET_URL',
                                  'https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID'),
            'bsc': 'https://bsc-dataseed.binance.org/',
            'arbitrum': 'https://arb1.arbitrum.io/rpc'
        }

        rpc_url = rpc_urls.get(f"{network}_test" if self.testnet else network)
        if not rpc_url:
            raise ValueError(f"Сеть '{network}' не поддерживается.")

        provider = HTTPProvider(rpc_url)
        web3 = Web3(provider)

        if not web3.is_connected():
            raise ConnectionError(f"Не удалось подключиться к сети {network}. Проверьте RPC URL.")

        return web3

    def validate_private_key(self, private_key: str) -> Account:
        if not private_key.startswith("0x"):
            private_key = "0x" + private_key

        if len(private_key) != 66:
            raise ValueError("Приватный ключ должен содержать 64 шестнадцатеричных символа после '0x'.")

        try:
            account = self.web3.eth.account.from_key(private_key)
            logging.info(f"Используется адрес кошелька: {account.address}")
            return account
        except Exception:
            raise ValueError("Неправильный приватный ключ. Проверьте и попробуйте снова.")

    def validate_address(self, address: str):
        if not self.web3.is_address(address):
            raise ValueError("Введен некорректный адрес. Проверьте и повторите ввод.")

    def validate_balance(self, amount: float):
        balance = self.web3.eth.get_balance(self.account.address)
        if self.web3.from_wei(balance, 'ether') < amount:
            raise ValueError("Недостаточно средств для выполнения транзакции.")

    async def send_native_token(self, to_address: str, amount: float) -> str:
        try:
            self.validate_balance(amount)
            nonce = self.web3.eth.get_transaction_count(self.account.address)
            gas_price = self.web3.eth.gas_price
            amount_in_wei = self.web3.to_wei(amount, 'ether')

            tx = {
                'to': to_address,
                'value': amount_in_wei,
                'nonce': nonce,
                'gas': 21000,
                'maxFeePerGas': gas_price * 2,
                'maxPriorityFeePerGas': self.web3.to_wei(2, 'gwei'),
                'type': '0x2',
                'chainId': self.web3.eth.chain_id
            }

            signed_tx = self.web3.eth.account.sign_transaction(tx, self.private_key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_tx.raw_transaction)
            logging.info(f"Транзакция отправлена. Хэш: {tx_hash.hex()}")
            return tx_hash.hex()

        except Exception as e:
            logging.error(f"Ошибка при отправке транзакции: {str(e)}")
            raise RuntimeError("Неизвестная ошибка при отправке транзакции.")

    async def check_transaction_status(self, tx_hash: str) -> Optional[str]:
        try:
            tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash)
            if tx_receipt.status == 1:
                return "Транзакция успешна"
            else:
                return "Транзакция не удалась"
        except Exception as e:
            logging.error(f"Ошибка при проверке статуса транзакции: {e}")
            raise RuntimeError("Ошибка при проверке статуса транзакции.")


async def main():
    private_key = input("Введите приватный ключ (начинается с 0x): ").strip()
    network = input("Выберите сеть (eth, bsc, arbitrum): ").strip().lower()
    testnet = input("Использовать тестовую сеть? (да/нет): ").strip().lower() == "да"
    to_address = input("Введите адрес получателя: ").strip()

    amount_input = input("Введите количество токенов для отправки: ").strip()
    amount_input = amount_input.replace(',', '.')
    try:
        amount = float(amount_input)
    except ValueError:
        print("Ошибка: Введите корректное числовое значение для суммы.")
        return

    try:
        tx_manager = TransactionManager(private_key, network, testnet=testnet)
        tx_manager.validate_address(to_address)
    except (ValueError, ConnectionError) as e:
        logging.error(e)
        return

    try:
        tx_hash = await tx_manager.send_native_token(to_address, amount)
    except RuntimeError as e:
        logging.error(e)
        return

    try:
        status = await tx_manager.check_transaction_status(tx_hash)
        logging.info(f"Статус транзакции: {status}")
    except RuntimeError as e:
        logging.error(e)


asyncio.run(main())
